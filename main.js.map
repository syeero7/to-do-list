{"version":3,"file":"main.js","mappings":"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","sources":["webpack://todo-app/./src/js/util/common.js","webpack://todo-app/./src/js/actions/viewProjects.js","webpack://todo-app/./src/js/classes/ProjectList.js","webpack://todo-app/./src/js/classes/Project.js","webpack://todo-app/./src/js/classes/Task.js","webpack://todo-app/./src/js/actions/addTask.js","webpack://todo-app/./node_modules/date-fns/constants.js","webpack://todo-app/./node_modules/date-fns/constructFrom.js","webpack://todo-app/./node_modules/date-fns/toDate.js","webpack://todo-app/./node_modules/date-fns/isEqual.js","webpack://todo-app/./node_modules/date-fns/_lib/normalizeDates.js","webpack://todo-app/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","webpack://todo-app/./node_modules/date-fns/startOfDay.js","webpack://todo-app/./node_modules/date-fns/differenceInCalendarDays.js","webpack://todo-app/./node_modules/date-fns/differenceInCalendarMonths.js","webpack://todo-app/./node_modules/date-fns/getQuarter.js","webpack://todo-app/./node_modules/date-fns/differenceInCalendarQuarters.js","webpack://todo-app/./node_modules/date-fns/_lib/defaultOptions.js","webpack://todo-app/./node_modules/date-fns/startOfWeek.js","webpack://todo-app/./node_modules/date-fns/differenceInCalendarWeeks.js","webpack://todo-app/./node_modules/date-fns/differenceInCalendarYears.js","webpack://todo-app/./node_modules/date-fns/_lib/getRoundingMethod.js","webpack://todo-app/./node_modules/date-fns/differenceInHours.js","webpack://todo-app/./node_modules/date-fns/differenceInMilliseconds.js","webpack://todo-app/./node_modules/date-fns/differenceInMinutes.js","webpack://todo-app/./node_modules/date-fns/differenceInSeconds.js","webpack://todo-app/./node_modules/date-fns/intlFormatDistance.js","webpack://todo-app/./src/js/localStorage.js","webpack://todo-app/./src/js/actions/viewTask.js","webpack://todo-app/./node_modules/date-fns/isPast.js","webpack://todo-app/./node_modules/date-fns/_lib/addLeadingZeros.js","webpack://todo-app/./node_modules/date-fns/formatISO.js","webpack://todo-app/./node_modules/date-fns/add.js","webpack://todo-app/./node_modules/date-fns/addMonths.js","webpack://todo-app/./node_modules/date-fns/addDays.js","webpack://todo-app/./src/js/util/tasksDOM.js","webpack://todo-app/./src/js/util/createTaskEl.js","webpack://todo-app/./src/js/actions/selectProject.js","webpack://todo-app/./src/js/util/projectsDOM.js","webpack://todo-app/./src/js/util/createProjectEl.js","webpack://todo-app/./src/js/actions/addProject.js","webpack://todo-app/./src/js/defaultProject.js","webpack://todo-app/./src/js/index.js","webpack://todo-app/./src/js/ui.js","webpack://todo-app/./src/js/actions/renameProject.js","webpack://todo-app/./src/js/actions/deleteProject.js","webpack://todo-app/./src/js/actions/taskStatus.js","webpack://todo-app/./src/js/actions/taskMenu.js","webpack://todo-app/./src/js/actions/editTask.js","webpack://todo-app/./src/js/actions/deleteTask.js"],"sourcesContent":["export const variables = { selectedProjectId: null, activeProjectId: null, activeTaskId: null };\n\n// selectors --------------------\n\nexport const renameProjectDialog = document.querySelector(\".rename-project\");\nexport const deleteProjectDialog = document.querySelector(\".delete-project\");\nexport const addTaskDialog = document.querySelector(\".add-task\");\nexport const editTaskDialog = document.querySelector(\".edit-task\");\nexport const viewTaskDialog = document.querySelector(\".view-task\");\n\nexport const addProjectForm = document.querySelector(\".add-project-form\");\nexport const projectNameInput = document.querySelector(\"#addProject\");\n\nexport const renameProjectForm = document.querySelector(\".rename-project-form\");\nexport const renameProjectInput = document.querySelector(\"#renameProject\");\n\nexport const deleteProjectHeader = document.querySelector(\".delete-project-title\");\n\nexport const addTaskForm = document.querySelector(\".add-task-form\");\nexport const addTitleInput = document.querySelector(\"#addTitle\");\nexport const addDescInput = document.querySelector(\"#addDescription\");\nexport const addDueDateInput = document.querySelector(\"#addDueDate\");\nexport const addPriorityInput = document.querySelector(\"#addPriority\");\n\nexport const editTaskForm = document.querySelector(\".edit-task-form\");\nexport const editTitleInput = document.querySelector(\"#editTitle\");\nexport const editDescInput = document.querySelector(\"#editDescription\");\nexport const editDueDateInput = document.querySelector(\"#editDueDate\");\nexport const editPriorityInput = document.querySelector(\"#editPriority\");\n\nexport const viewTitle = document.querySelector(\"[data-task-title]\");\nexport const viewDesc = document.querySelector(\"[data-task-description]\");\nexport const viewDueDate = document.querySelector(\"[data-task-due-date]\");\nexport const viewPriority = document.querySelector(\"[data-task-priority]\");\nexport const viewStatus = document.querySelector(\"[data-task-status]\");\n\nexport const projectsMenuBtn = document.querySelector(\"button[data-projects]\");\nexport const projectListSection = document.querySelector(\".projects\");\nexport const projectSection = document.querySelector(\".todo-list\");\n\nexport const selectedProjectHeader = document.querySelector(\".selected-project\");\nexport const addTaskBtn = document.querySelector(\".todo-list>header .add-task-btn\");\nexport const projectListElement = document.querySelector(\".project-list\");\nexport const taskListElement = document.querySelector(\".task-list\");\n\n// functions -------------------\n\nexport function generateNewId() {\n  return Date.now().toString();\n}\n\nexport function removeElements(parentElement) {\n  while (parentElement.firstChild) {\n    parentElement.firstChild.remove();\n  }\n}\n","import { projectListSection, projectSection, projectsMenuBtn } from \"../util/common.js\";\n\nexport function viewProjectsClickHandler() {\n  if (this.dataset.projects === \"open\") handleOpening(this);\n  else handleClosing(this);\n}\n\nfunction handleOpening(target) {\n  projectSection.dataset.active = \"false\";\n  projectListSection.dataset.active = \"true\";\n  target.dataset.projects = \"close\";\n}\n\nfunction handleClosing(target) {\n  projectListSection.dataset.active = \"false\";\n  projectSection.dataset.active = \"true\";\n  target.dataset.projects = \"open\";\n}\n\nexport function setOpenIfMobile() {\n  if (projectsMenuBtn.dataset.projects === \"open\") return;\n  handleClosing(projectsMenuBtn);\n}\n","class ProjectList {\n  #list;\n\n  constructor() {\n    this.#list = [];\n  }\n\n  addProject(project) {\n    this.#list.push(project);\n  }\n\n  deleteProject(projectId) {\n    const projects = this.#list;\n\n    for (let i = 0; i < projects.length; i++) {\n      if (projectId == projects[i].id) {\n        this.#list.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  get list() {\n    return this.#list;\n  }\n}\n\nconst projectList = new ProjectList();\nexport default projectList;\n","export default class Project {\n  #id;\n  #name;\n  #list;\n\n  constructor() {\n    this.#id = null;\n    this.#name = null;\n    this.#list = [];\n  }\n\n  get id() {\n    return this.#id;\n  }\n\n  set id(id) {\n    this.#id = id;\n  }\n\n  get name() {\n    return this.#name;\n  }\n\n  set name(name) {\n    this.#name = name;\n  }\n\n  addTask(task) {\n    this.#list.push(task);\n  }\n\n  deleteTask(taskId) {\n    const tasks = this.#list;\n\n    for (let i = 0; i < tasks.length; i++) {\n      if (taskId == tasks[i].id) {\n        this.#list.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  get tasks() {\n    return this.#list;\n  }\n}\n","export default class Task {\n  #id;\n  #title;\n  #description;\n  #dueDate;\n  #priority;\n  #completed;\n\n  constructor() {\n    this.#id = null;\n    this.#title = null;\n    this.#description = null;\n    this.#dueDate = null;\n    this.#priority = null;\n    this.#completed = false;\n  }\n\n  get id() {\n    return this.#id;\n  }\n  set id(id) {\n    this.#id = id;\n  }\n\n  get title() {\n    return this.#title;\n  }\n  set title(title) {\n    this.#title = title;\n  }\n\n  get description() {\n    return this.#description;\n  }\n  set description(desc) {\n    this.#description = desc;\n  }\n\n  get dueDate() {\n    return this.#dueDate;\n  }\n  set dueDate(dueDate) {\n    this.#dueDate = dueDate;\n  }\n\n  get priority() {\n    return this.#priority;\n  }\n  set priority(priority) {\n    this.#priority = priority;\n  }\n\n  get isCompleted() {\n    return this.#completed;\n  }\n  set isCompleted(value) {\n    this.#completed = value;\n  }\n}\n","import projectList from \"../classes/ProjectList.js\";\nimport Task from \"../classes/Task.js\";\nimport { getDueDateMinMaxAttributes, refreshTaskList } from \"../util/tasksDOM.js\";\nimport {\n  addDescInput,\n  addDueDateInput,\n  addPriorityInput,\n  addTaskDialog,\n  addTitleInput,\n  generateNewId,\n  variables,\n} from \"../util/common.js\";\n\nexport function openAddTaskDialog() {\n  resetInputValues();\n  addTaskDialog.showModal();\n}\n\nexport function getUserInput(e) {\n  e.preventDefault();\n\n  const title = addTitleInput.value.trim();\n  const description = addDescInput.value.trim();\n  const dueDate = addDueDateInput.value.trim();\n  const priority = addPriorityInput.value.trim();\n\n  if (!title.length) return;\n\n  addTask(title, description, dueDate, priority);\n}\n\nexport function addTask(\n  title,\n  description,\n  dueDate,\n  priority,\n  status = false,\n  id = generateNewId(),\n) {\n  const task = new Task();\n  task.id = id;\n  task.title = title;\n  task.description = description;\n  task.dueDate = dueDate;\n  task.priority = priority;\n  task.isCompleted = status;\n\n  const project = projectList.list.find((project) => project.id == variables.selectedProjectId);\n  project.addTask(task);\n\n  refreshTaskList();\n  resetInputValues();\n  addTitleInput.focus();\n}\n\nfunction resetInputValues() {\n  addTitleInput.value = \"\";\n  addDescInput.value = \"\";\n  addPriorityInput.selectedIndex = 0;\n  setDueDateInputAttributes();\n}\n\nfunction setDueDateInputAttributes() {\n  const attributes = getDueDateMinMaxAttributes();\n\n  addDueDateInput.value = attributes.min;\n  addDueDateInput.min = attributes.min;\n  addDueDateInput.max = attributes.max;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The dates are equal\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * const result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\nexport function isEqual(leftDate, rightDate) {\n  return +toDate(leftDate) === +toDate(rightDate);\n}\n\n// Fallback for modularized imports:\nexport default isEqual;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarMonths} function options.\n */\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\n\n  return yearsDiff * 12 + monthsDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getQuarter} function options.\n */\n\n/**\n * @name getQuarter\n * @category Quarter Helpers\n * @summary Get the year quarter of the given date.\n *\n * @description\n * Get the year quarter of the given date.\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The quarter\n *\n * @example\n * // Which quarter is 2 July 2014?\n * const result = getQuarter(new Date(2014, 6, 2));\n * //=> 3\n */\nexport function getQuarter(date, options) {\n  const _date = toDate(date, options?.in);\n  const quarter = Math.trunc(_date.getMonth() / 3) + 1;\n  return quarter;\n}\n\n// Fallback for modularized imports:\nexport default getQuarter;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { getQuarter } from \"./getQuarter.js\";\n\n/**\n * The {@link differenceInCalendarQuarters} function options.\n */\n\n/**\n * @name differenceInCalendarQuarters\n * @category Quarter Helpers\n * @summary Get the number of calendar quarters between the given dates.\n *\n * @description\n * Get the number of calendar quarters between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar quarters\n *\n * @example\n * // How many calendar quarters are between 31 December 2013 and 2 July 2014?\n * const result = differenceInCalendarQuarters(\n *   new Date(2014, 6, 2),\n *   new Date(2013, 11, 31)\n * )\n * //=> 3\n */\nexport function differenceInCalendarQuarters(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const quartersDiff = getQuarter(laterDate_) - getQuarter(earlierDate_);\n\n  return yearsDiff * 4 + quartersDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarQuarters;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link differenceInCalendarWeeks} function options.\n */\n\n/**\n * @name differenceInCalendarWeeks\n * @category Week Helpers\n * @summary Get the number of calendar weeks between the given dates.\n *\n * @description\n * Get the number of calendar weeks between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of calendar weeks\n *\n * @example\n * // How many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5)\n * )\n * //=> 3\n *\n * @example\n * // If the week starts on Monday,\n * // how many calendar weeks are between 5 July 2014 and 20 July 2014?\n * const result = differenceInCalendarWeeks(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 6, 5),\n *   { weekStartsOn: 1 }\n * )\n * //=> 2\n */\nexport function differenceInCalendarWeeks(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfWeek = startOfWeek(laterDate_, options);\n  const earlierStartOfWeek = startOfWeek(earlierDate_, options);\n\n  const laterTimestamp =\n    +laterStartOfWeek - getTimezoneOffsetInMilliseconds(laterStartOfWeek);\n  const earlierTimestamp =\n    +earlierStartOfWeek - getTimezoneOffsetInMilliseconds(earlierStartOfWeek);\n\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInWeek);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarWeeks;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarYears} function options.\n */\n\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n\n * @returns The number of calendar years\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * );\n * //=> 2\n */\nexport function differenceInCalendarYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  return laterDate_.getFullYear() - earlierDate_.getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarYears;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link differenceInHours} function options.\n */\n\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of hours\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport function differenceInHours(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInHours;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { millisecondsInMinute } from \"./constants.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInMinutes} function options.\n */\n\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of minutes\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport function differenceInMinutes(dateLeft, dateRight, options) {\n  const diff =\n    differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMinutes;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(laterDate, earlierDate, options) {\n  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport {\n  secondsInDay,\n  secondsInHour,\n  secondsInMinute,\n  secondsInMonth,\n  secondsInQuarter,\n  secondsInWeek,\n  secondsInYear,\n} from \"./constants.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\nimport { differenceInCalendarQuarters } from \"./differenceInCalendarQuarters.js\";\nimport { differenceInCalendarWeeks } from \"./differenceInCalendarWeeks.js\";\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.js\";\nimport { differenceInHours } from \"./differenceInHours.js\";\nimport { differenceInMinutes } from \"./differenceInMinutes.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\n\n/**\n * The {@link intlFormatDistance} function options.\n */\n\n/**\n * The unit used to format the distance in {@link intlFormatDistance}.\n */\n\n/**\n * @name intlFormatDistance\n * @category Common Helpers\n * @summary Formats distance between two dates in a human-readable format\n * @description\n * The function calculates the difference between two dates and formats it as a human-readable string.\n *\n * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.\n *\n * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.\n *\n * See the table below for the unit picking logic:\n *\n * | Distance between dates | Result (past)  | Result (future) |\n * | ---------------------- | -------------- | --------------- |\n * | 0 seconds              | now            | now             |\n * | 1-59 seconds           | X seconds ago  | in X seconds    |\n * | 1-59 minutes           | X minutes ago  | in X minutes    |\n * | 1-23 hours             | X hours ago    | in X hours      |\n * | 1 day                  | yesterday      | tomorrow        |\n * | 2-6 days               | X days ago     | in X days       |\n * | 7 days                 | last week      | next week       |\n * | 8 days-1 month         | X weeks ago    | in X weeks      |\n * | 1 month                | last month     | next month      |\n * | 2-3 months             | X months ago   | in X months     |\n * | 1 quarter              | last quarter   | next quarter    |\n * | 2-3 quarters           | X quarters ago | in X quarters   |\n * | 1 year                 | last year      | next year       |\n * | 2+ years               | X years ago    | in X years      |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with.\n * @param options - An object with options.\n * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n * The narrow one could be similar to the short one for some locales.\n *\n * @returns The distance in words according to language-sensitive relative time formatting.\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must not be invalid Unit\n * @throws `options.locale` must not be invalid locale\n * @throws `options.localeMatcher` must not be invalid localeMatcher\n * @throws `options.numeric` must not be invalid numeric\n * @throws `options.style` must not be invalid style\n *\n * @example\n * // What is the distance between the dates when the fist date is after the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0)\n * )\n * //=> 'in 1 hour'\n *\n * // What is the distance between the dates when the fist date is before the second?\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0)\n * )\n * //=> '1 hour ago'\n *\n * @example\n * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return \"next year\"\n * intlFormatDistance(\n *   new Date(1987, 6, 4, 10, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { unit: 'quarter' }\n * )\n * //=> 'in 5 quarters'\n *\n * @example\n * // Use the locale option to get the result in Spanish. Without setting it, the example would return \"in 1 hour\".\n * intlFormatDistance(\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 10, 30, 0),\n *   { locale: 'es' }\n * )\n * //=> 'dentro de 1 hora'\n *\n * @example\n * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return \"tomorrow\".\n * intlFormatDistance(\n *   new Date(1986, 3, 5, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { numeric: 'always' }\n * )\n * //=> 'in 1 day'\n *\n * @example\n * // Use the style option to force the function to use short values. Without setting it, the example would return \"in 2 years\".\n * intlFormatDistance(\n *   new Date(1988, 3, 4, 11, 30, 0),\n *   new Date(1986, 3, 4, 11, 30, 0),\n *   { style: 'short' }\n * )\n * //=> 'in 2 yr'\n */\nexport function intlFormatDistance(laterDate, earlierDate, options) {\n  let value = 0;\n  let unit;\n\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  if (!options?.unit) {\n    // Get the unit based on diffInSeconds calculations if no unit is specified\n    const diffInSeconds = differenceInSeconds(laterDate_, earlierDate_); // The smallest unit\n\n    if (Math.abs(diffInSeconds) < secondsInMinute) {\n      value = differenceInSeconds(laterDate_, earlierDate_);\n      unit = \"second\";\n    } else if (Math.abs(diffInSeconds) < secondsInHour) {\n      value = differenceInMinutes(laterDate_, earlierDate_);\n      unit = \"minute\";\n    } else if (\n      Math.abs(diffInSeconds) < secondsInDay &&\n      Math.abs(differenceInCalendarDays(laterDate_, earlierDate_)) < 1\n    ) {\n      value = differenceInHours(laterDate_, earlierDate_);\n      unit = \"hour\";\n    } else if (\n      Math.abs(diffInSeconds) < secondsInWeek &&\n      (value = differenceInCalendarDays(laterDate_, earlierDate_)) &&\n      Math.abs(value) < 7\n    ) {\n      unit = \"day\";\n    } else if (Math.abs(diffInSeconds) < secondsInMonth) {\n      value = differenceInCalendarWeeks(laterDate_, earlierDate_);\n      unit = \"week\";\n    } else if (Math.abs(diffInSeconds) < secondsInQuarter) {\n      value = differenceInCalendarMonths(laterDate_, earlierDate_);\n      unit = \"month\";\n    } else if (Math.abs(diffInSeconds) < secondsInYear) {\n      if (differenceInCalendarQuarters(laterDate_, earlierDate_) < 4) {\n        // To filter out cases that are less than a year but match 4 quarters\n        value = differenceInCalendarQuarters(laterDate_, earlierDate_);\n        unit = \"quarter\";\n      } else {\n        value = differenceInCalendarYears(laterDate_, earlierDate_);\n        unit = \"year\";\n      }\n    } else {\n      value = differenceInCalendarYears(laterDate_, earlierDate_);\n      unit = \"year\";\n    }\n  } else {\n    // Get the value if unit is specified\n    unit = options?.unit;\n    if (unit === \"second\") {\n      value = differenceInSeconds(laterDate_, earlierDate_);\n    } else if (unit === \"minute\") {\n      value = differenceInMinutes(laterDate_, earlierDate_);\n    } else if (unit === \"hour\") {\n      value = differenceInHours(laterDate_, earlierDate_);\n    } else if (unit === \"day\") {\n      value = differenceInCalendarDays(laterDate_, earlierDate_);\n    } else if (unit === \"week\") {\n      value = differenceInCalendarWeeks(laterDate_, earlierDate_);\n    } else if (unit === \"month\") {\n      value = differenceInCalendarMonths(laterDate_, earlierDate_);\n    } else if (unit === \"quarter\") {\n      value = differenceInCalendarQuarters(laterDate_, earlierDate_);\n    } else if (unit === \"year\") {\n      value = differenceInCalendarYears(laterDate_, earlierDate_);\n    }\n  }\n\n  const rtf = new Intl.RelativeTimeFormat(options?.locale, {\n    numeric: \"auto\",\n    ...options,\n  });\n\n  return rtf.format(value, unit);\n}\n\n// Fallback for modularized imports:\nexport default intlFormatDistance;\n","import projectList from \"./classes/ProjectList.js\";\nimport { addProject } from \"./actions/addProject.js\";\nimport { addTask } from \"./actions/addTask.js\";\nimport { removeElements, taskListElement, variables } from \"./util/common.js\";\n\nexport function saveToLocalStorage() {\n  const data = projectList.list.map((project) => ({\n    id: project.id,\n    name: project.name,\n    tasks: project.tasks.map((task) => ({\n      id: task.id,\n      title: task.title,\n      description: task.description,\n      dueDate: task.dueDate,\n      priority: task.priority,\n      isCompleted: task.isCompleted,\n    })),\n  }));\n\n  localStorage.setItem(\"toDo_L1st\", JSON.stringify(data));\n}\n\nexport function loadFromLocalStorage() {\n  const data = localStorage.getItem(\"toDo_L1st\");\n  if (!data || !data.length) return;\n\n  JSON.parse(data).forEach((project) => {\n    addProject(project.name, project.id);\n    variables.selectedProjectId = project.id;\n    project.tasks.forEach((task) => {\n      addTask(task.title, task.description, task.dueDate, task.priority, task.isCompleted, task.id);\n    });\n  });\n\n  removeElements(taskListElement);\n}\n","import projectList from \"../classes/ProjectList.js\";\nimport { intlFormatDistance, isEqual, isPast } from \"date-fns\";\nimport {\n  variables,\n  viewDesc,\n  viewDueDate,\n  viewPriority,\n  viewStatus,\n  viewTaskDialog,\n  viewTitle,\n} from \"../util/common.js\";\n\nexport function openViewTaskDialog(taskId) {\n  variables.activeTaskId = taskId;\n  updateViewTaskDialogTextContent();\n  viewTaskDialog.showModal();\n}\n\nfunction updateViewTaskDialogTextContent() {\n  const project = projectList.list.find((project) => project.id == variables.selectedProjectId);\n  const task = project.tasks.find((task) => task.id == variables.activeTaskId);\n\n  viewTitle.textContent = task.title;\n  viewDesc.textContent = task.description;\n  viewDueDate.textContent = getDueDateTextContent(task.dueDate, new Date());\n  viewPriority.textContent = task.priority;\n  viewStatus.textContent = task.isComplete ? \"task is completed\" : \"task is incomplete\";\n}\n\nfunction getDueDateTextContent(dueDate, newDate) {\n  const isDueDateToday = isEqual(newDate.toISOString().slice(0, 10), dueDate);\n  const taskDueDate = isDueDateToday ? \"today\" : intlFormatDistance(dueDate, newDate);\n  const isTaskOverdue = isPast(dueDate) && !isDueDateToday;\n  const textContent = isTaskOverdue ? \"task is overdue\" : `task is due ${taskDueDate}`;\n\n  return textContent;\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name isPast\n * @category Common Helpers\n * @summary Is the given date in the past?\n * @pure false\n *\n * @description\n * Is the given date in the past?\n *\n * @param date - The date to check\n *\n * @returns The date is in the past\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * const result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\nexport function isPast(date) {\n  return +toDate(date) < Date.now();\n}\n\n// Fallback for modularized imports:\nexport default isPast;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"./_lib/addLeadingZeros.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link formatISO} function options.\n */\n\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param date - The original date\n * @param options - An object with options.\n *\n * @returns The formatted date string (in local time zone)\n *\n * @throws `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\nexport function formatISO(date, options) {\n  const date_ = toDate(date, options?.in);\n\n  if (isNaN(+date_)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const format = options?.format ?? \"extended\";\n  const representation = options?.representation ?? \"complete\";\n\n  let result = \"\";\n  let tzOffset = \"\";\n\n  const dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n  const timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n  // Representation is either 'date' or 'complete'\n  if (representation !== \"time\") {\n    const day = addLeadingZeros(date_.getDate(), 2);\n    const month = addLeadingZeros(date_.getMonth() + 1, 2);\n    const year = addLeadingZeros(date_.getFullYear(), 4);\n\n    // yyyyMMdd or yyyy-MM-dd.\n    result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n  }\n\n  // Representation is either 'time' or 'complete'\n  if (representation !== \"date\") {\n    // Add the timezone.\n    const offset = date_.getTimezoneOffset();\n\n    if (offset !== 0) {\n      const absoluteOffset = Math.abs(offset);\n      const hourOffset = addLeadingZeros(Math.trunc(absoluteOffset / 60), 2);\n      const minuteOffset = addLeadingZeros(absoluteOffset % 60, 2);\n      // If less than 0, the sign is +, because it is ahead of time.\n      const sign = offset < 0 ? \"+\" : \"-\";\n\n      tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n    } else {\n      tzOffset = \"Z\";\n    }\n\n    const hour = addLeadingZeros(date_.getHours(), 2);\n    const minute = addLeadingZeros(date_.getMinutes(), 2);\n    const second = addLeadingZeros(date_.getSeconds(), 2);\n\n    // If there's also date, separate it with time with 'T'\n    const separator = result === \"\" ? \"\" : \"T\";\n\n    // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n    const time = [hour, minute, second].join(timeDelimiter);\n\n    // HHmmss or HH:mm:ss.\n    result = `${result}${separator}${time}${tzOffset}`;\n  }\n\n  return result;\n}\n\n// Fallback for modularized imports:\nexport default formatISO;\n","import { addDays } from \"./addDays.js\";\nimport { addMonths } from \"./addMonths.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link add} function options.\n */\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport function add(date, duration, options) {\n  const {\n    years = 0,\n    months = 0,\n    weeks = 0,\n    days = 0,\n    hours = 0,\n    minutes = 0,\n    seconds = 0,\n  } = duration;\n\n  // Add years and months\n  const _date = toDate(date, options?.in);\n  const dateWithMonths =\n    months || years ? addMonths(_date, months + years * 12) : _date;\n\n  // Add weeks and days\n  const dateWithDays =\n    days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes, and seconds\n  const minutesToAdd = minutes + hours * 60;\n  const secondsToAdd = seconds + minutesToAdd * 60;\n  const msToAdd = secondsToAdd * 1000;\n\n  return constructFrom(options?.in || date, +dateWithDays + msToAdd);\n}\n\n// Fallback for modularized imports:\nexport default add;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMonths} function options.\n */\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n * @param options - The options object\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(options?.in || date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import projectList from \"../classes/ProjectList.js\";\nimport { getUserInput, openAddTaskDialog } from \"../actions/addTask.js\";\nimport { createTaskElements } from \"./createTaskEl.js\";\nimport { updateTaskStatus } from \"../actions/taskStatus.js\";\nimport { taskButtonClickHandler } from \"../actions/taskMenu.js\";\nimport { getEditTaskInputs } from \"../actions/editTask.js\";\nimport { add, formatISO } from \"date-fns\";\nimport {\n  addTaskBtn,\n  addTaskDialog,\n  addTaskForm,\n  editTaskDialog,\n  editTaskForm,\n  removeElements,\n  taskListElement,\n  variables,\n  viewTaskDialog,\n} from \"./common.js\";\nimport { saveToLocalStorage } from \"../localStorage.js\";\n\nexport function handleTasksEvents() {\n  addTaskBtn.addEventListener(\"click\", openAddTaskDialog);\n  addTaskForm.addEventListener(\"submit\", getUserInput);\n  addTaskForm.addEventListener(\"click\", (e) => {\n    if (!e.target.matches(\".close-btn\")) return;\n    addTaskDialog.close();\n  });\n  taskListElement.addEventListener(\"change\", updateTaskStatus);\n  taskListElement.addEventListener(\"click\", taskButtonClickHandler);\n  editTaskForm.addEventListener(\"submit\", getEditTaskInputs);\n  editTaskForm.addEventListener(\"click\", (e) => {\n    if (!e.target.matches(\".cancel-btn\")) return;\n    editTaskDialog.close();\n  });\n  viewTaskDialog.addEventListener(\"click\", (e) => {\n    if (!e.target.matches(\".close-btn\")) return;\n    viewTaskDialog.close();\n    variables.activeTaskId = null;\n  });\n}\n\nfunction renderTasks() {\n  const project = projectList.list.find((project) => project.id == variables.selectedProjectId);\n  const fragment = createTaskElements(project.tasks);\n  taskListElement.appendChild(fragment);\n}\n\nexport function refreshTaskList() {\n  removeElements(taskListElement);\n  renderTasks();\n  saveToLocalStorage();\n}\n\nexport function getDueDateMinMaxAttributes() {\n  const now = new Date();\n  const today = now.toISOString().slice(0, 10);\n  const tenYearsFromNow = formatISO(add(now, { years: 10 }), { representation: \"date\" });\n\n  return { min: today, max: tenYearsFromNow };\n}\n","import { intlFormatDistance, isEqual } from \"date-fns\";\n\nexport function createTaskElements(project) {\n  const fragment = document.createDocumentFragment();\n\n  project.forEach((task) => {\n    const listItem = document.createElement(\"li\");\n    listItem.dataset.taskId = task.id;\n\n    const label = document.createElement(\"label\");\n    if (task.isCompleted) label.classList.add(\"completed\");\n    label.dataset.priority = task.priority.toLowerCase();\n    const input = document.createElement(\"input\");\n    input.type = \"checkbox\";\n    input.checked = task.isCompleted;\n    const text = document.createTextNode(task.title);\n\n    const span = document.createElement(\"span\");\n    span.ariaLabel = \"due date\";\n    span.classList.add(\"due-date\");\n    // task.dueDate === today\n    span.textContent = isEqual(new Date().toISOString().slice(0, 10), task.dueDate)\n      ? \"today\"\n      : intlFormatDistance(task.dueDate, new Date());\n    //distance between task.dueDate and today\n\n    const div = document.createElement(\"div\");\n    div.classList.add(\"dropdown-container\");\n    const button = document.createElement(\"button\");\n    button.classList.add(\"more-btn\", \"btn-bg\");\n    button.ariaLabel = \"task options\";\n    const article = createDropdownButtons();\n\n    label.append(input, text);\n    div.append(button, article);\n    listItem.append(label, span, div);\n    fragment.appendChild(listItem);\n  });\n\n  return fragment;\n}\n\nfunction createDropdownButtons() {\n  const article = document.createElement(\"article\");\n  article.classList.add(\"dropdown-content\");\n\n  const viewBtn = document.createElement(\"button\");\n  viewBtn.classList.add(\"drop-view-btn\");\n  viewBtn.textContent = \"View\";\n\n  const editBtn = document.createElement(\"button\");\n  editBtn.classList.add(\"drop-edit-btn\");\n  editBtn.textContent = \"Edit\";\n\n  const deleteBtn = document.createElement(\"button\");\n  deleteBtn.classList.add(\"drop-delete-btn\");\n  deleteBtn.textContent = \"Delete\";\n\n  article.append(viewBtn, editBtn, deleteBtn);\n  return article;\n}\n","import projectList from \"../classes/ProjectList.js\";\nimport { refreshTaskList } from \"../util/tasksDOM.js\";\nimport {\n  addTaskBtn,\n  projectListElement,\n  removeElements,\n  selectedProjectHeader,\n  taskListElement,\n  variables,\n} from \"../util/common.js\";\n\nexport function selectProject(projectId, targetElement) {\n  projectListElement.querySelectorAll(\"li\").forEach((listItem) => {\n    listItem.classList.remove(\"selected\");\n  });\n  targetElement.parentElement.classList.add(\"selected\");\n\n  variables.selectedProjectId = projectId;\n  resetSelectedList();\n  refreshTaskList();\n}\n\nexport function resetSelectedList() {\n  addTaskBtn.disabled = true;\n  selectedProjectHeader.textContent = \"Please select a project\";\n  removeElements(taskListElement); // clear task list\n\n  const hasSelected = [...projectListElement.querySelectorAll(\"li\")].some((listItem) => {\n    return listItem.classList.contains(\"selected\");\n  });\n\n  if (!hasSelected) return;\n\n  addTaskBtn.disabled = false;\n  const project = projectList.list.find((project) => project.id == variables.selectedProjectId);\n  selectedProjectHeader.textContent = project.name;\n}\n","import { openDeleteProjectDialog } from \"../actions/deleteProject.js\";\nimport { openRenameProjectDialog } from \"../actions/renameProject.js\";\nimport { resetSelectedList, selectProject } from \"../actions/selectProject.js\";\nimport { setOpenIfMobile } from \"../actions/viewProjects.js\";\nimport projectList from \"../classes/ProjectList.js\";\nimport { saveToLocalStorage } from \"../localStorage.js\";\nimport { projectListElement, removeElements } from \"./common.js\";\nimport { createProjectElements } from \"./createProjectEl.js\";\n\nfunction renderProjectList() {\n  const fragment = createProjectElements(projectList.list);\n  projectListElement.appendChild(fragment);\n}\n\nexport function refreshProjectList() {\n  removeElements(projectListElement);\n  renderProjectList();\n  resetSelectedList();\n  saveToLocalStorage();\n}\n\nexport function handleProjectListClicks() {\n  projectListElement.addEventListener(\"click\", (e) => {\n    const target = e.target;\n    if (target.tagName !== \"A\" && target.tagName !== \"BUTTON\") return;\n    const projectId = target.parentElement.dataset.projectId;\n\n    if (target.matches(\".edit-btn\")) openRenameProjectDialog(projectId);\n    if (target.matches(\".delete-btn\")) openDeleteProjectDialog(projectId);\n    if (target.tagName === \"A\") {\n      e.preventDefault();\n      selectProject(projectId, target);\n      setOpenIfMobile(); // set value to open\n    }\n  });\n}\n","export function createProjectElements(projectList) {\n  const fragment = document.createDocumentFragment();\n\n  projectList.forEach((project) => {\n    const listItem = document.createElement(\"li\");\n    listItem.dataset.projectId = project.id;\n\n    const link = document.createElement(\"a\");\n    link.textContent = project.name;\n    link.href = \"#\";\n\n    const editBtn = document.createElement(\"button\");\n    editBtn.classList.add(\"edit-btn\", \"btn-bg\");\n    editBtn.ariaLabel = \"rename project\";\n\n    const deleteBtn = document.createElement(\"button\");\n    deleteBtn.classList.add(\"delete-btn\", \"btn-bg\");\n    deleteBtn.ariaLabel = \"delete project\";\n\n    listItem.append(link, editBtn, deleteBtn);\n    fragment.appendChild(listItem);\n  });\n\n  return fragment;\n}\n","import projectList from \"../classes/ProjectList.js\";\nimport Project from \"../classes/Project.js\";\nimport { generateNewId, projectNameInput } from \"../util/common.js\";\nimport { refreshProjectList } from \"../util/projectsDOM.js\";\n\nexport function getProjectInput(e) {\n  e.preventDefault();\n  const projectName = projectNameInput.value.trim();\n  if (!projectName.length) return;\n  addProject(projectName);\n}\n\nexport function addProject(name, id = generateNewId()) {\n  const project = new Project();\n  project.id = id;\n  project.name = name;\n  projectList.addProject(project);\n\n  projectNameInput.value = \"\";\n  refreshProjectList();\n}\n","export function setDefaultProject() {\n  const data = [\n    {\n      id: \"1733114048486\",\n      name: \"personal\",\n      tasks: [\n        {\n          id: \"1733114088917\",\n          title: \"idle for a while\",\n          description: \"\",\n          dueDate: \"2024-12-02\",\n          priority: \"important\",\n          isCompleted: true,\n        },\n        {\n          id: \"1733114407692\",\n          title: \"make a todo list\",\n          description: \"make a todo list and then immediately forget what’s on it\",\n          dueDate: \"2024-12-02\",\n          priority: \"normal\",\n          isCompleted: true,\n        },\n      ],\n    },\n  ];\n\n  const storedData = localStorage.getItem(\"toDo_L1st\");\n\n  if (!storedData) localStorage.setItem(\"toDo_L1st\", JSON.stringify(data));\n}\n","import \"../style.css\";\nimport { initApp } from \"./ui.js\";\nimport { loadFromLocalStorage } from \"./localStorage.js\";\nimport { setDefaultProject } from \"./defaultProject.js\";\n\nsetDefaultProject();\nloadFromLocalStorage();\ninitApp();\n","import { viewProjectsClickHandler } from \"./actions/viewProjects.js\";\nimport { addProjectForm, projectsMenuBtn } from \"./util/common.js\";\nimport { getProjectInput } from \"./actions/addProject.js\";\nimport { handleProjectListClicks } from \"./util/projectsDOM.js\";\nimport { initRenameProjectForm } from \"./actions/renameProject.js\";\nimport { initDeleteProject } from \"./actions/deleteProject.js\";\nimport { handleTasksEvents } from \"./util/tasksDOM.js\";\n\nexport function initApp() {\n  // adding event listeners\n  projectsMenuBtn.addEventListener(\"click\", viewProjectsClickHandler);\n  addProjectForm.addEventListener(\"submit\", getProjectInput);\n  handleProjectListClicks();\n  initRenameProjectForm();\n  initDeleteProject();\n  handleTasksEvents();\n}\n","import projectList from \"../classes/ProjectList.js\";\nimport { refreshProjectList } from \"../util/projectsDOM.js\";\nimport {\n  renameProjectDialog,\n  renameProjectForm,\n  renameProjectInput,\n  variables,\n} from \"../util/common.js\";\n\nexport function initRenameProjectForm() {\n  renameProjectForm.addEventListener(\"submit\", getProjectName);\n  renameProjectForm.addEventListener(\"click\", clickHandler);\n}\n\nexport function openRenameProjectDialog(projectId) {\n  variables.activeProjectId = projectId;\n  setRenameProjectInputValue(projectId);\n  renameProjectDialog.showModal();\n}\n\nfunction setRenameProjectInputValue(projectId) {\n  const project = projectList.list.find((project) => project.id === projectId);\n  renameProjectInput.value = project.name;\n}\n\nfunction getProjectName(e) {\n  e.preventDefault();\n  const input = renameProjectInput.value.trim();\n  if (!input.length) return;\n  updateProjectName(input);\n}\n\nfunction updateProjectName(input) {\n  const project = projectList.list.find((project) => project.id === variables.activeProjectId);\n  project.name = input;\n\n  refreshProjectList();\n  renameProjectDialog.close();\n  variables.activeProjectId = null;\n}\n\nfunction clickHandler(e) {\n  if (!e.target.matches(\".cancel-btn\")) return;\n\n  renameProjectDialog.close();\n  variables.activeProjectId = null;\n}\n","import projectList from \"../classes/ProjectList.js\";\nimport { refreshProjectList } from \"../util/projectsDOM.js\";\nimport { deleteProjectDialog, deleteProjectHeader, variables } from \"../util/common.js\";\n\nexport function initDeleteProject() {\n  deleteProjectDialog.querySelector(\".btn-container\").addEventListener(\"click\", clickHandler);\n}\n\nexport function openDeleteProjectDialog(projectId) {\n  variables.activeProjectId = projectId;\n  setDeleteProjectDialogHeader(projectId);\n  deleteProjectDialog.showModal();\n}\n\nfunction clickHandler(e) {\n  if (e.target.matches(\".confirm-btn\")) deleteProject();\n  if (e.target.matches(\".cancel-btn\")) {\n    variables.activeProjectId = null;\n    deleteProjectDialog.close();\n  }\n}\n\nfunction deleteProject() {\n  projectList.deleteProject(variables.activeProjectId);\n  variables.activeProjectId = null;\n  deleteProjectDialog.close();\n  refreshProjectList();\n}\n\nfunction setDeleteProjectDialogHeader(projectId) {\n  const project = projectList.list.find((project) => project.id === projectId);\n  deleteProjectHeader.textContent = project.name;\n}\n","import projectList from \"../classes/ProjectList.js\";\nimport { saveToLocalStorage } from \"../localStorage.js\";\nimport { variables } from \"../util/common.js\";\n\nexport function updateTaskStatus(e) {\n  const target = e.target;\n  if (target.type !== \"checkbox\") return;\n  const taskId = target.closest(\"li\").dataset.taskId;\n  const project = projectList.list.find((project) => project.id == variables.selectedProjectId);\n  const task = project.tasks.find((task) => task.id == taskId);\n  task.isCompleted = target.checked;\n  saveToLocalStorage();\n\n  target.checked\n    ? target.parentElement.classList.add(\"completed\")\n    : target.parentElement.classList.remove(\"completed\");\n}\n","import { deleteTask } from \"./deleteTask.js\";\nimport { openEditTaskDialog } from \"./editTask.js\";\nimport { openViewTaskDialog } from \"./viewTask.js\";\n\nexport function taskButtonClickHandler(e) {\n  const target = e.target;\n  if (!target.parentElement.matches(\".dropdown-content\")) return;\n  const taskId = target.closest(\"li\").dataset.taskId;\n\n  if (target.matches(\".drop-view-btn\")) openViewTaskDialog(taskId);\n  if (target.matches(\".drop-edit-btn\")) openEditTaskDialog(taskId);\n  if (target.matches(\".drop-delete-btn\")) deleteTask(taskId);\n}\n","import projectList from \"../classes/ProjectList.js\";\nimport { getDueDateMinMaxAttributes, refreshTaskList } from \"../util/tasksDOM.js\";\nimport {\n  editDescInput,\n  editDueDateInput,\n  editPriorityInput,\n  editTaskDialog,\n  editTitleInput,\n  variables,\n} from \"../util/common.js\";\n\nexport function openEditTaskDialog(taskId) {\n  variables.activeTaskId = taskId;\n  setEditTaskFormElementAttributeValues();\n\n  editTaskDialog.showModal();\n}\n\nfunction setEditTaskFormElementAttributeValues() {\n  const project = projectList.list.find((project) => project.id == variables.selectedProjectId);\n  const task = project.tasks.find((task) => task.id == variables.activeTaskId);\n  const dueDate = getDueDateMinMaxAttributes();\n\n  editTitleInput.value = task.title;\n  editDescInput.value = task.description;\n  editDueDateInput.value = task.dueDate;\n  editDueDateInput.min = dueDate.min;\n  editDueDateInput.max = dueDate.max;\n  editPriorityInput.value = task.priority;\n}\n\nexport function getEditTaskInputs(e) {\n  e.preventDefault();\n\n  const title = editTitleInput.value.trim();\n  const description = editDescInput.value.trim();\n  const dueDate = editDueDateInput.value.trim();\n  const priority = editPriorityInput.value.trim();\n\n  setTaskEditedValues(title, description, dueDate, priority);\n}\n\nfunction setTaskEditedValues(title, description, dueDate, priority) {\n  if (!title.length) return;\n  const project = projectList.list.find((project) => project.id == variables.selectedProjectId);\n  const task = project.tasks.find((task) => task.id == variables.activeTaskId);\n\n  task.title = title;\n  task.description = description;\n  task.dueDate = dueDate;\n  task.priority = priority;\n\n  refreshTaskList();\n  editTaskDialog.close();\n  variables.activeTaskId = null;\n}\n","import projectList from \"../classes/ProjectList.js\";\nimport { variables } from \"../util/common.js\";\nimport { refreshTaskList } from \"../util/tasksDOM.js\";\n\nexport function deleteTask(taskId) {\n  const project = projectList.list.find((project) => project.id == variables.selectedProjectId);\n  project.deleteTask(taskId);\n\n  refreshTaskList();\n}\n"],"names":["variables","selectedProjectId","activeProjectId","activeTaskId","renameProjectDialog","document","querySelector","deleteProjectDialog","addTaskDialog","editTaskDialog","viewTaskDialog","addProjectForm","projectNameInput","renameProjectForm","renameProjectInput","deleteProjectHeader","addTaskForm","addTitleInput","addDescInput","addDueDateInput","addPriorityInput","editTaskForm","editTitleInput","editDescInput","editDueDateInput","editPriorityInput","viewTitle","viewDesc","viewDueDate","viewPriority","viewStatus","projectsMenuBtn","projectListSection","projectSection","selectedProjectHeader","addTaskBtn","projectListElement","taskListElement","generateNewId","Date","now","toString","removeElements","parentElement","firstChild","remove","handleClosing","target","dataset","active","projects","constructor","this","addProject","project","push","deleteProject","projectId","i","length","id","splice","list","Project","name","addTask","task","deleteTask","taskId","tasks","Task","title","description","desc","dueDate","priority","isCompleted","value","status","find","refreshTaskList","resetInputValues","focus","selectedIndex","attributes","getDueDateMinMaxAttributes","min","max","setDueDateInputAttributes","Math","pow","millisecondsInWeek","millisecondsInDay","millisecondsInMinute","millisecondsInHour","secondsInHour","secondsInMinute","secondsInDay","secondsInWeek","secondsInYear","secondsInMonth","secondsInQuarter","constructFromSymbol","Symbol","for","constructFrom","date","toDate","argument","context","isEqual","leftDate","rightDate","normalizeDates","dates","normalize","bind","map","getTimezoneOffsetInMilliseconds","_date","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","startOfDay","options","in","setHours","differenceInCalendarDays","laterDate","earlierDate","laterDate_","earlierDate_","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","round","differenceInCalendarMonths","getQuarter","trunc","differenceInCalendarQuarters","defaultOptions","getDefaultOptions","startOfWeek","weekStartsOn","locale","day","getDay","diff","setDate","differenceInCalendarWeeks","laterStartOfWeek","earlierStartOfWeek","differenceInCalendarYears","getRoundingMethod","method","number","result","differenceInHours","roundingMethod","differenceInMilliseconds","differenceInMinutes","dateLeft","dateRight","differenceInSeconds","intlFormatDistance","unit","diffInSeconds","abs","Intl","RelativeTimeFormat","numeric","format","saveToLocalStorage","data","localStorage","setItem","JSON","stringify","openViewTaskDialog","textContent","newDate","isDueDateToday","toISOString","slice","taskDueDate","getDueDateTextContent","isComplete","updateViewTaskDialogTextContent","showModal","addLeadingZeros","targetLength","padStart","formatISO","date_","isNaN","RangeError","representation","tzOffset","dateDelimiter","timeDelimiter","month","offset","getTimezoneOffset","absoluteOffset","join","add","duration","years","months","weeks","days","hours","minutes","seconds","dateWithMonths","amount","NaN","dayOfMonth","endOfDesiredMonth","getTime","setMonth","setFullYear","addMonths","dateWithDays","addDays","msToAdd","fragment","createDocumentFragment","forEach","listItem","createElement","label","classList","toLowerCase","input","type","checked","text","createTextNode","span","ariaLabel","div","button","article","viewBtn","editBtn","deleteBtn","append","createDropdownButtons","appendChild","createTaskElements","renderTasks","resetSelectedList","disabled","querySelectorAll","some","contains","refreshProjectList","projectList","link","href","createProjectElements","renderProjectList","getItem","parse","loadFromLocalStorage","addEventListener","e","preventDefault","projectName","trim","tagName","matches","setRenameProjectInputValue","openRenameProjectDialog","setDeleteProjectDialogHeader","openDeleteProjectDialog","targetElement","selectProject","close","updateProjectName","closest","setEditTaskFormElementAttributeValues","openEditTaskDialog","setTaskEditedValues"],"sourceRoot":""}